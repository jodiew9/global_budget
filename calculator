import { useState } from "react";
import { Input } from "@/components/ui/input";
import { Card, CardContent } from "@/components/ui/card";
import { Label } from "@/components/ui/label";
import { Select, SelectTrigger, SelectContent, SelectItem } from "@/components/ui/select";
import { ResponsiveContainer, PieChart, Pie, Cell, Tooltip } from "recharts";

const CURRENCIES = ["USD", "EUR", "GBP", "JPY", "INR", "CNY"];
const COLORS = ["#0088FE", "#00C49F", "#FFBB28", "#FF8042", "#A28BFE", "#FF6699", "#66CCFF", "#FFCC66"];

export default function BudgetCalculator() {
  const [income, setIncome] = useState(0);
  const [currency, setCurrency] = useState("USD");
  const [expenses, setExpenses] = useState({
    housing: 0,
    food: 0,
    transportation: 0,
    utilities: 0,
    insurance: 0,
    savings: 0,
    retirement: 0,
    entertainment: 0,
    other: 0,
  });

  const handleExpenseChange = (category, value) => {
    setExpenses((prev) => ({ ...prev, [category]: parseFloat(value) || 0 }));
  };

  const totalExpenses = Object.values(expenses).reduce((a, b) => a + b, 0);
  const balance = income - totalExpenses;

  const data = Object.entries(expenses).map(([key, value], index) => ({
    name: key.charAt(0).toUpperCase() + key.slice(1),
    value,
  }));

  return (
    <div className="max-w-xl mx-auto p-4 space-y-6">
      <h1 className="text-2xl font-bold">Global Budget Calculator</h1>
      <Card>
        <CardContent className="space-y-4 pt-4">
          <div>
            <Label htmlFor="currency">Currency</Label>
            <Select value={currency} onValueChange={setCurrency}>
              <SelectTrigger>{currency}</SelectTrigger>
              <SelectContent>
                {CURRENCIES.map((cur) => (
                  <SelectItem key={cur} value={cur}>{cur}</SelectItem>
                ))}
              </SelectContent>
            </Select>
          </div>
          <div>
            <Label htmlFor="income">Monthly Income ({currency})</Label>
            <Input
              id="income"
              type="number"
              value={income}
              onChange={(e) => setIncome(parseFloat(e.target.value) || 0)}
              placeholder="Enter your income"
            />
            <p className="text-sm text-muted-foreground mt-1">
              Enter your monthly <strong>post-tax</strong> income (take-home pay after mandatory deductions).
            </p>
          </div>
          {Object.keys(expenses).map((category) => (
            <div key={category}>
              <Label htmlFor={category}>{category.charAt(0).toUpperCase() + category.slice(1)} ({currency})</Label>
              <Input
                id={category}
                type="number"
                value={expenses[category]}
                onChange={(e) => handleExpenseChange(category, e.target.value)}
                placeholder={`Enter ${category} expenses`}
              />
              {category === "retirement" && (
                <p className="text-sm text-muted-foreground mt-1">
                  Include voluntary contributions to pensions or retirement accounts. Exclude mandatory payroll deductions.
                </p>
              )}
            </div>
          ))}
        </CardContent>
      </Card>

      <div className="text-lg font-medium">
        <p>Total Expenses: {totalExpenses.toFixed(2)} {currency}</p>
        <p className={balance >= 0 ? "text-green-600" : "text-red-600"}>
          Balance: {balance.toFixed(2)} {currency}
        </p>
      </div>

      <div className="h-64">
        <ResponsiveContainer>
          <PieChart>
            <Pie
              data={data}
              dataKey="value"
              nameKey="name"
              outerRadius={100}
              label
            >
              {data.map((entry, index) => (
                <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />
              ))}
            </Pie>
            <Tooltip formatter={(value) => `${value.toFixed(2)} ${currency}`} />
          </PieChart>
        </ResponsiveContainer>
      </div>
    </div>
  );
}
